// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/03/2022 17:17:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux_2to1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_2to1_vlg_sample_tst(
	in1,
	in2,
	sel,
	sampler_tx
);
input [31:0] in1;
input [31:0] in2;
input  sel;
output sampler_tx;

reg sample;
time current_time;
always @(in1 or in2 or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux_2to1_vlg_check_tst (
	X,
	sampler_rx
);
input [31:0] X;
input sampler_rx;

reg [31:0] X_expected;

reg [31:0] X_prev;

reg [31:0] X_expected_prev;

reg [31:0] last_X_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	X_prev = X;
end

// update expected /o prevs

always @(trigger)
begin
	X_expected_prev = X_expected;
end


// expected X[ 31 ]
initial
begin
	X_expected[31] = 1'bX;
end 
// expected X[ 30 ]
initial
begin
	X_expected[30] = 1'bX;
end 
// expected X[ 29 ]
initial
begin
	X_expected[29] = 1'bX;
end 
// expected X[ 28 ]
initial
begin
	X_expected[28] = 1'bX;
end 
// expected X[ 27 ]
initial
begin
	X_expected[27] = 1'bX;
end 
// expected X[ 26 ]
initial
begin
	X_expected[26] = 1'bX;
end 
// expected X[ 25 ]
initial
begin
	X_expected[25] = 1'bX;
end 
// expected X[ 24 ]
initial
begin
	X_expected[24] = 1'bX;
end 
// expected X[ 23 ]
initial
begin
	X_expected[23] = 1'bX;
end 
// expected X[ 22 ]
initial
begin
	X_expected[22] = 1'bX;
end 
// expected X[ 21 ]
initial
begin
	X_expected[21] = 1'bX;
end 
// expected X[ 20 ]
initial
begin
	X_expected[20] = 1'bX;
end 
// expected X[ 19 ]
initial
begin
	X_expected[19] = 1'bX;
end 
// expected X[ 18 ]
initial
begin
	X_expected[18] = 1'bX;
end 
// expected X[ 17 ]
initial
begin
	X_expected[17] = 1'bX;
end 
// expected X[ 16 ]
initial
begin
	X_expected[16] = 1'bX;
end 
// expected X[ 15 ]
initial
begin
	X_expected[15] = 1'bX;
end 
// expected X[ 14 ]
initial
begin
	X_expected[14] = 1'bX;
end 
// expected X[ 13 ]
initial
begin
	X_expected[13] = 1'bX;
end 
// expected X[ 12 ]
initial
begin
	X_expected[12] = 1'bX;
end 
// expected X[ 11 ]
initial
begin
	X_expected[11] = 1'bX;
end 
// expected X[ 10 ]
initial
begin
	X_expected[10] = 1'bX;
end 
// expected X[ 9 ]
initial
begin
	X_expected[9] = 1'bX;
end 
// expected X[ 8 ]
initial
begin
	X_expected[8] = 1'bX;
end 
// expected X[ 7 ]
initial
begin
	X_expected[7] = 1'bX;
end 
// expected X[ 6 ]
initial
begin
	X_expected[6] = 1'bX;
end 
// expected X[ 5 ]
initial
begin
	X_expected[5] = 1'bX;
end 
// expected X[ 4 ]
initial
begin
	X_expected[4] = 1'bX;
end 
// expected X[ 3 ]
initial
begin
	X_expected[3] = 1'bX;
end 
// expected X[ 2 ]
initial
begin
	X_expected[2] = 1'bX;
end 
// expected X[ 1 ]
initial
begin
	X_expected[1] = 1'bX;
end 
// expected X[ 0 ]
initial
begin
	X_expected[0] = 1'bX;
end 
// generate trigger
always @(X_expected or X)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected X = %b | ",X_expected_prev);
	$display("| real X = %b | ",X_prev);
`endif
	if (
		( X_expected_prev[0] !== 1'bx ) && ( X_prev[0] !== X_expected_prev[0] )
		&& ((X_expected_prev[0] !== last_X_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[0] = X_expected_prev[0];
	end
	if (
		( X_expected_prev[1] !== 1'bx ) && ( X_prev[1] !== X_expected_prev[1] )
		&& ((X_expected_prev[1] !== last_X_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[1] = X_expected_prev[1];
	end
	if (
		( X_expected_prev[2] !== 1'bx ) && ( X_prev[2] !== X_expected_prev[2] )
		&& ((X_expected_prev[2] !== last_X_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[2] = X_expected_prev[2];
	end
	if (
		( X_expected_prev[3] !== 1'bx ) && ( X_prev[3] !== X_expected_prev[3] )
		&& ((X_expected_prev[3] !== last_X_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[3] = X_expected_prev[3];
	end
	if (
		( X_expected_prev[4] !== 1'bx ) && ( X_prev[4] !== X_expected_prev[4] )
		&& ((X_expected_prev[4] !== last_X_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[4] = X_expected_prev[4];
	end
	if (
		( X_expected_prev[5] !== 1'bx ) && ( X_prev[5] !== X_expected_prev[5] )
		&& ((X_expected_prev[5] !== last_X_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[5] = X_expected_prev[5];
	end
	if (
		( X_expected_prev[6] !== 1'bx ) && ( X_prev[6] !== X_expected_prev[6] )
		&& ((X_expected_prev[6] !== last_X_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[6] = X_expected_prev[6];
	end
	if (
		( X_expected_prev[7] !== 1'bx ) && ( X_prev[7] !== X_expected_prev[7] )
		&& ((X_expected_prev[7] !== last_X_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[7] = X_expected_prev[7];
	end
	if (
		( X_expected_prev[8] !== 1'bx ) && ( X_prev[8] !== X_expected_prev[8] )
		&& ((X_expected_prev[8] !== last_X_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[8] = X_expected_prev[8];
	end
	if (
		( X_expected_prev[9] !== 1'bx ) && ( X_prev[9] !== X_expected_prev[9] )
		&& ((X_expected_prev[9] !== last_X_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[9] = X_expected_prev[9];
	end
	if (
		( X_expected_prev[10] !== 1'bx ) && ( X_prev[10] !== X_expected_prev[10] )
		&& ((X_expected_prev[10] !== last_X_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[10] = X_expected_prev[10];
	end
	if (
		( X_expected_prev[11] !== 1'bx ) && ( X_prev[11] !== X_expected_prev[11] )
		&& ((X_expected_prev[11] !== last_X_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[11] = X_expected_prev[11];
	end
	if (
		( X_expected_prev[12] !== 1'bx ) && ( X_prev[12] !== X_expected_prev[12] )
		&& ((X_expected_prev[12] !== last_X_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[12] = X_expected_prev[12];
	end
	if (
		( X_expected_prev[13] !== 1'bx ) && ( X_prev[13] !== X_expected_prev[13] )
		&& ((X_expected_prev[13] !== last_X_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[13] = X_expected_prev[13];
	end
	if (
		( X_expected_prev[14] !== 1'bx ) && ( X_prev[14] !== X_expected_prev[14] )
		&& ((X_expected_prev[14] !== last_X_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[14] = X_expected_prev[14];
	end
	if (
		( X_expected_prev[15] !== 1'bx ) && ( X_prev[15] !== X_expected_prev[15] )
		&& ((X_expected_prev[15] !== last_X_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[15] = X_expected_prev[15];
	end
	if (
		( X_expected_prev[16] !== 1'bx ) && ( X_prev[16] !== X_expected_prev[16] )
		&& ((X_expected_prev[16] !== last_X_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[16] = X_expected_prev[16];
	end
	if (
		( X_expected_prev[17] !== 1'bx ) && ( X_prev[17] !== X_expected_prev[17] )
		&& ((X_expected_prev[17] !== last_X_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[17] = X_expected_prev[17];
	end
	if (
		( X_expected_prev[18] !== 1'bx ) && ( X_prev[18] !== X_expected_prev[18] )
		&& ((X_expected_prev[18] !== last_X_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[18] = X_expected_prev[18];
	end
	if (
		( X_expected_prev[19] !== 1'bx ) && ( X_prev[19] !== X_expected_prev[19] )
		&& ((X_expected_prev[19] !== last_X_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[19] = X_expected_prev[19];
	end
	if (
		( X_expected_prev[20] !== 1'bx ) && ( X_prev[20] !== X_expected_prev[20] )
		&& ((X_expected_prev[20] !== last_X_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[20] = X_expected_prev[20];
	end
	if (
		( X_expected_prev[21] !== 1'bx ) && ( X_prev[21] !== X_expected_prev[21] )
		&& ((X_expected_prev[21] !== last_X_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[21] = X_expected_prev[21];
	end
	if (
		( X_expected_prev[22] !== 1'bx ) && ( X_prev[22] !== X_expected_prev[22] )
		&& ((X_expected_prev[22] !== last_X_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[22] = X_expected_prev[22];
	end
	if (
		( X_expected_prev[23] !== 1'bx ) && ( X_prev[23] !== X_expected_prev[23] )
		&& ((X_expected_prev[23] !== last_X_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[23] = X_expected_prev[23];
	end
	if (
		( X_expected_prev[24] !== 1'bx ) && ( X_prev[24] !== X_expected_prev[24] )
		&& ((X_expected_prev[24] !== last_X_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[24] = X_expected_prev[24];
	end
	if (
		( X_expected_prev[25] !== 1'bx ) && ( X_prev[25] !== X_expected_prev[25] )
		&& ((X_expected_prev[25] !== last_X_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[25] = X_expected_prev[25];
	end
	if (
		( X_expected_prev[26] !== 1'bx ) && ( X_prev[26] !== X_expected_prev[26] )
		&& ((X_expected_prev[26] !== last_X_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[26] = X_expected_prev[26];
	end
	if (
		( X_expected_prev[27] !== 1'bx ) && ( X_prev[27] !== X_expected_prev[27] )
		&& ((X_expected_prev[27] !== last_X_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[27] = X_expected_prev[27];
	end
	if (
		( X_expected_prev[28] !== 1'bx ) && ( X_prev[28] !== X_expected_prev[28] )
		&& ((X_expected_prev[28] !== last_X_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[28] = X_expected_prev[28];
	end
	if (
		( X_expected_prev[29] !== 1'bx ) && ( X_prev[29] !== X_expected_prev[29] )
		&& ((X_expected_prev[29] !== last_X_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[29] = X_expected_prev[29];
	end
	if (
		( X_expected_prev[30] !== 1'bx ) && ( X_prev[30] !== X_expected_prev[30] )
		&& ((X_expected_prev[30] !== last_X_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[30] = X_expected_prev[30];
	end
	if (
		( X_expected_prev[31] !== 1'bx ) && ( X_prev[31] !== X_expected_prev[31] )
		&& ((X_expected_prev[31] !== last_X_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_X_exp[31] = X_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux_2to1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] in1;
reg [31:0] in2;
reg sel;
// wires                                               
wire [31:0] X;

wire sampler;                             

// assign statements (if any)                          
mux_2to1 i1 (
// port map - connection between master ports and signals/registers   
	.in1(in1),
	.in2(in2),
	.sel(sel),
	.X(X)
);
// in1[ 31 ]
initial
begin
	in1[31] = 1'b1;
end 
// in1[ 30 ]
initial
begin
	in1[30] = 1'b1;
end 
// in1[ 29 ]
initial
begin
	in1[29] = 1'b1;
end 
// in1[ 28 ]
initial
begin
	in1[28] = 1'b1;
end 
// in1[ 27 ]
initial
begin
	in1[27] = 1'b1;
end 
// in1[ 26 ]
initial
begin
	in1[26] = 1'b1;
end 
// in1[ 25 ]
initial
begin
	in1[25] = 1'b1;
end 
// in1[ 24 ]
initial
begin
	in1[24] = 1'b1;
end 
// in1[ 23 ]
initial
begin
	in1[23] = 1'b1;
end 
// in1[ 22 ]
initial
begin
	in1[22] = 1'b1;
end 
// in1[ 21 ]
initial
begin
	in1[21] = 1'b1;
end 
// in1[ 20 ]
initial
begin
	in1[20] = 1'b1;
end 
// in1[ 19 ]
initial
begin
	in1[19] = 1'b1;
end 
// in1[ 18 ]
initial
begin
	in1[18] = 1'b1;
end 
// in1[ 17 ]
initial
begin
	in1[17] = 1'b1;
end 
// in1[ 16 ]
initial
begin
	in1[16] = 1'b1;
end 
// in1[ 15 ]
initial
begin
	in1[15] = 1'b1;
end 
// in1[ 14 ]
initial
begin
	in1[14] = 1'b1;
end 
// in1[ 13 ]
initial
begin
	in1[13] = 1'b1;
end 
// in1[ 12 ]
initial
begin
	in1[12] = 1'b1;
end 
// in1[ 11 ]
initial
begin
	in1[11] = 1'b1;
end 
// in1[ 10 ]
initial
begin
	in1[10] = 1'b1;
end 
// in1[ 9 ]
initial
begin
	in1[9] = 1'b1;
end 
// in1[ 8 ]
initial
begin
	in1[8] = 1'b1;
end 
// in1[ 7 ]
initial
begin
	in1[7] = 1'b1;
end 
// in1[ 6 ]
initial
begin
	in1[6] = 1'b1;
end 
// in1[ 5 ]
initial
begin
	in1[5] = 1'b1;
end 
// in1[ 4 ]
initial
begin
	in1[4] = 1'b1;
end 
// in1[ 3 ]
initial
begin
	in1[3] = 1'b1;
end 
// in1[ 2 ]
initial
begin
	in1[2] = 1'b1;
end 
// in1[ 1 ]
initial
begin
	in1[1] = 1'b1;
end 
// in1[ 0 ]
initial
begin
	in1[0] = 1'b1;
end 
// in2[ 31 ]
initial
begin
	in2[31] = 1'b0;
end 
// in2[ 30 ]
initial
begin
	in2[30] = 1'b0;
end 
// in2[ 29 ]
initial
begin
	in2[29] = 1'b0;
end 
// in2[ 28 ]
initial
begin
	in2[28] = 1'b0;
end 
// in2[ 27 ]
initial
begin
	in2[27] = 1'b0;
end 
// in2[ 26 ]
initial
begin
	in2[26] = 1'b0;
end 
// in2[ 25 ]
initial
begin
	in2[25] = 1'b0;
end 
// in2[ 24 ]
initial
begin
	in2[24] = 1'b0;
end 
// in2[ 23 ]
initial
begin
	in2[23] = 1'b0;
end 
// in2[ 22 ]
initial
begin
	in2[22] = 1'b0;
end 
// in2[ 21 ]
initial
begin
	in2[21] = 1'b0;
end 
// in2[ 20 ]
initial
begin
	in2[20] = 1'b0;
end 
// in2[ 19 ]
initial
begin
	in2[19] = 1'b0;
end 
// in2[ 18 ]
initial
begin
	in2[18] = 1'b0;
end 
// in2[ 17 ]
initial
begin
	in2[17] = 1'b0;
end 
// in2[ 16 ]
initial
begin
	in2[16] = 1'b0;
end 
// in2[ 15 ]
initial
begin
	in2[15] = 1'b0;
end 
// in2[ 14 ]
initial
begin
	in2[14] = 1'b0;
end 
// in2[ 13 ]
initial
begin
	in2[13] = 1'b0;
end 
// in2[ 12 ]
initial
begin
	in2[12] = 1'b0;
end 
// in2[ 11 ]
initial
begin
	in2[11] = 1'b0;
end 
// in2[ 10 ]
initial
begin
	in2[10] = 1'b0;
end 
// in2[ 9 ]
initial
begin
	in2[9] = 1'b0;
end 
// in2[ 8 ]
initial
begin
	in2[8] = 1'b0;
end 
// in2[ 7 ]
initial
begin
	in2[7] = 1'b0;
end 
// in2[ 6 ]
initial
begin
	in2[6] = 1'b0;
end 
// in2[ 5 ]
initial
begin
	in2[5] = 1'b0;
end 
// in2[ 4 ]
initial
begin
	in2[4] = 1'b0;
end 
// in2[ 3 ]
initial
begin
	in2[3] = 1'b0;
end 
// in2[ 2 ]
initial
begin
	in2[2] = 1'b0;
end 
// in2[ 1 ]
initial
begin
	in2[1] = 1'b0;
end 
// in2[ 0 ]
initial
begin
	in2[0] = 1'b0;
end 

// sel
initial
begin
	sel = 1'b0;
end 

mux_2to1_vlg_sample_tst tb_sample (
	.in1(in1),
	.in2(in2),
	.sel(sel),
	.sampler_tx(sampler)
);

mux_2to1_vlg_check_tst tb_out(
	.X(X),
	.sampler_rx(sampler)
);
endmodule

